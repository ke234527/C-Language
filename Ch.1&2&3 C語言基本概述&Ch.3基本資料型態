直譯器(interpreter)
優點:由於直譯器只要逐行翻譯，占用的記憶體較少
缺點:每一行在執行前才被翻譯，因而導致延長執行時間，所以執行速度較慢，效率也較低
-------------------------------------------------
編譯器(compiler)
優點:在編譯程式時，會先檢查所有的程式碼是否符合語法，再編譯成執行檔，效率較高
缺點:當原始程式修改一次，就必須重新編譯
-------------------------------------------------
程式由主函式 main() 開始執行。
return     // 回傳結果
return 0  // 表執行成功
-------------------------------------------------
資料型態(Data type)
  整數
     long int     長整數L      4位元組(bytes)     // 1 位元組 (byte) = 8 位元 (bits) , 1 bit = 2 , 2 bits = 2*2
     int           整數       4位元組(bytes)     // 早期的int編譯器可能為2位元組(bytes) , 範圍 : -2.147.483.648 ~ 2.147.483.648(2的31次方-1)
     short int    短整數      2位元組(bytes)     // 節省記憶空間
  無號整數
    即於宣告整數型態時，加上 unsigned ，使得資料不會出現負數的情況下，正數的表示範圍變為原來兩倍
  浮點數
      float         浮點數F     4位元組(bytes)    
      double     倍精度浮點數  8位元組(bytes)
  字元
      chat          字元      1位元組(byte)      // ASCII 中 A 為 65 , a 為 97
  字串
      string
  布林值
      bool
  特殊
      void                        // 不確定待會所宣告之變數的資料型別為何時使用，可寫可不寫
------------------------------
跳脫字元(Escaped character)
  \n        // 換行
  \'        // 單引號
  \"        // 雙引號
  \\        // 反斜線
  \t        // TAB鍵
  \a        // 警告聲(beep)
  \b        // 倒退一格
-------------------------------------------------
溢位(overflow)
    當數值大小超過變數可以表示的範圍(最大值)時，會自動歸零至最小值
-------------------------------------------------
資料型態轉換
    (欲轉換的資料型態) 變數名稱;
    但是當大型別轉小型別時，可能會有資料遺失的問題
-------------------------------------------------
查詢常數、變數或資料所占位元組
    sizeof(常數、變數、)
